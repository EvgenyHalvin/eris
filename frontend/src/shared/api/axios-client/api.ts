/* tslint:disable */
/* eslint-disable */
/**
 * eris-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface EventGroup
 */
export interface EventGroup {
    /**
     * 
     * @type {string}
     * @memberof EventGroup
     */
    'id'?: string;
    /**
     * 
     * @type {Array<ListEvent>}
     * @memberof EventGroup
     */
    'events'?: Array<ListEvent>;
}
/**
 * 
 * @export
 * @interface Events
 */
export interface Events {
    /**
     * 
     * @type {Array<EventGroup>}
     * @memberof Events
     */
    'items'?: Array<EventGroup>;
    /**
     * 
     * @type {number}
     * @memberof Events
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ListEvent
 */
export interface ListEvent {
    /**
     * 
     * @type {string}
     * @memberof ListEvent
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListEvent
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListEvent
     */
    'resourceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListEvent
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'details'?: string;
    /**
     * 
     * @type {Array<string | ResourceValue>}
     * @memberof Resource
     */
    'values'?: Array<string | ResourceValue>;
}
/**
 * 
 * @export
 * @interface ResourceValue
 */
export interface ResourceValue {
    /**
     * 
     * @type {number}
     * @memberof ResourceValue
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceValue
     */
    'unit'?: string;
}
/**
 * 
 * @export
 * @interface Resources
 */
export interface Resources {
    /**
     * 
     * @type {Array<Resource>}
     * @memberof Resources
     */
    'items'?: Array<Resource>;
}
/**
 * 
 * @export
 * @interface ResourcesPayload
 */
export interface ResourcesPayload {
    /**
     * 
     * @type {Array<string>}
     * @memberof ResourcesPayload
     */
    'ids'?: Array<string>;
}

/**
 * ErisApi - axios parameter creator
 * @export
 */
export const ErisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is needed to get events
         * @param {number} [page] pagination page
         * @param {'DATE'} [sortBy] sort by value
         * @param {'ASC' | 'DESC'} [sortOrder] sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEvents: async (page?: number, sortBy?: 'DATE', sortOrder?: 'ASC' | 'DESC', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is needed to get resources
         * @param {ResourcesPayload} [resourcesPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResources: async (resourcesPayload?: ResourcesPayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourcesPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ErisApi - functional programming interface
 * @export
 */
export const ErisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ErisApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is needed to get events
         * @param {number} [page] pagination page
         * @param {'DATE'} [sortBy] sort by value
         * @param {'ASC' | 'DESC'} [sortOrder] sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEvents(page?: number, sortBy?: 'DATE', sortOrder?: 'ASC' | 'DESC', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Events>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEvents(page, sortBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint is needed to get resources
         * @param {ResourcesPayload} [resourcesPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postResources(resourcesPayload?: ResourcesPayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resources>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postResources(resourcesPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ErisApi - factory interface
 * @export
 */
export const ErisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ErisApiFp(configuration)
    return {
        /**
         * This endpoint is needed to get events
         * @param {number} [page] pagination page
         * @param {'DATE'} [sortBy] sort by value
         * @param {'ASC' | 'DESC'} [sortOrder] sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEvents(page?: number, sortBy?: 'DATE', sortOrder?: 'ASC' | 'DESC', options?: any): AxiosPromise<Events> {
            return localVarFp.postEvents(page, sortBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is needed to get resources
         * @param {ResourcesPayload} [resourcesPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResources(resourcesPayload?: ResourcesPayload, options?: any): AxiosPromise<Resources> {
            return localVarFp.postResources(resourcesPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for postEvents operation in ErisApi.
 * @export
 * @interface ErisApiPostEventsRequest
 */
export interface ErisApiPostEventsRequest {
    /**
     * pagination page
     * @type {number}
     * @memberof ErisApiPostEvents
     */
    readonly page?: number

    /**
     * sort by value
     * @type {'DATE'}
     * @memberof ErisApiPostEvents
     */
    readonly sortBy?: 'DATE'

    /**
     * sort order
     * @type {'ASC' | 'DESC'}
     * @memberof ErisApiPostEvents
     */
    readonly sortOrder?: 'ASC' | 'DESC'
}

/**
 * Request parameters for postResources operation in ErisApi.
 * @export
 * @interface ErisApiPostResourcesRequest
 */
export interface ErisApiPostResourcesRequest {
    /**
     * 
     * @type {ResourcesPayload}
     * @memberof ErisApiPostResources
     */
    readonly resourcesPayload?: ResourcesPayload
}

/**
 * ErisApi - object-oriented interface
 * @export
 * @class ErisApi
 * @extends {BaseAPI}
 */
export class ErisApi extends BaseAPI {
    /**
     * This endpoint is needed to get events
     * @param {ErisApiPostEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErisApi
     */
    public postEvents(requestParameters: ErisApiPostEventsRequest = {}, options?: AxiosRequestConfig) {
        return ErisApiFp(this.configuration).postEvents(requestParameters.page, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint is needed to get resources
     * @param {ErisApiPostResourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErisApi
     */
    public postResources(requestParameters: ErisApiPostResourcesRequest = {}, options?: AxiosRequestConfig) {
        return ErisApiFp(this.configuration).postResources(requestParameters.resourcesPayload, options).then((request) => request(this.axios, this.basePath));
    }
}


